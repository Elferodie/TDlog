#CASANOVA Guillaume and FERRERES Elodie

import random


class Board:
    def __init__(self, matrix, outTile):
        self._tilesMatrix = matrix
        self._outTile = outTile

    def initBoard(self):
        dynamicList = generateDynamicTiles()
        self.placeStaticTiles()
        self.placeDynamicTiles(dynamicList)

    def placeStaticTiles(self):

        #Place tiles in the corners
        self._tilesMatrix[0][0] = Tile(None,None,True,"l",[0,1,1,0],None )
        self._tilesMatrix[0][6] = Tile(None, None, True, "l", [0, 0, 1, 1], None)
        self._tilesMatrix[6][6] = Tile(None, None, True, "l", [1, 0, 0, 1], None)
        self._tilesMatrix[6][0] = Tile(None, None, True, "l", [1, 1, 0, 0], None)

        # Place tiles in the centre
        for i in [2, 4]:
            for j in [2, 4]:
                self._tilesMatrix[i][j] = Tile(j,i,True,"x",[1,1,1,1],None )

        objectList = [0,1,2,3,4,5,6,7] # Initialisation of object list

        #Place tiles on the edges with random objects
        #Not finished yet(orientation of tiles are not coded properly)
        for i in [2, 4]:
            for j in [2, 4]:
                k = random.randint(0,len(objectList)-1) # We choose a random object in the list
                obj = objectList.pop(k)
                self._tilesMatrix[i][j] = Tile(j, i, True, "t", [0, 1, 1, 1], obj)

    def placeDynamicTiles(self, dynamicList):
        for i in range(7):
            for j in range(7):
                if (i % 2 == 1 or j % 2 == 1):
                    index = random.randint(0, len(dynamicList) - 1)
                    self._tilesMatrix[i][j] = dynamicList[index]
                    dynamicList.pop(index)

        return dynamicList  # only the outtile is left in dynamicList

    def displayBoard(self):
        for i in range(7):
            for j in range(7):
                self._tilesMatrix[i][j].displayTile()


class Tile:

    def __init__(self, x0=None, y0=None, stat=False, type="l", form=[0,1,1,0], obj=None):
        self._x = x0    # outside of the board
        self._y = y0
        self._static = stat
        self._type = type
        self._form = form
        self._obj = obj

    def displayTile(self):
        pass

    def rotate(self):
        pass


class Object:
    def __init__(self, x0, y0, obj):
        self._x = x0
        self._y = y0
        self._obj = obj


def generateDynamicTiles():
    dynamicList = []

    for tile in range(16):
        newTile = Tile(None,None,False,[1,1,0,0],"l",None)
        dynamicList.append(newTile)

    for tile in range(12):
        newTile = Tile(None,None,False,[1,0,1,0],"i",None)
        dynamicList.append(newTile)

    for tile in range(6):
        newTile = Tile(None,None,False,[1,1,1,0],"t",None)
        dynamicList.append(newTile)

    return dynamicList
